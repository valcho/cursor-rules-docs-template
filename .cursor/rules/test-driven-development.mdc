---
description: 
globs: 
---
---
name: test_driven_development
description: Standards for Test-Driven Development in the Social Script project
version: 1.0.0
author: Dan
date: 2024-02-11
globs:
  - "src/services/**/*.ts"
  - "test/**/*.test.ts"
  - "test/**/*.spec.ts"
tags:
  - testing
  - tdd
  - specs
  - services
---

# Test-Driven Development (TDD) Rule

<rule>
name: test_driven_development
description: Rules and standards for Test-Driven Development
filters:
  - type: file_extension
    pattern: "\\.ts$"
  - type: directory
    pattern: "(test|src/services)"
  - type: content
    pattern: "spec\\.describe|describe.ts*"
actions:
  - type: suggest
    message: |
      Test-Driven Development Rules:

      1. Test First, Code Second:
         - ALWAYS check for existing tests
         - Create tests BEFORE implementation
         - Use tests as documentation

      2. Implementation Process:
         a) Review/Create Tests
         b) Run Tests (should fail)
         c) Implement Code
         d) Run Tests (should pass)
         e) Refactor

      3. Test Structure:
         ```typescript
         describe('ServiceName', () => {
           describe('behavior', () => {
             it('defines functionality');
             it('handles edge cases');
           });

           describe('conditions', () => {
             it('behaves correctly');
           });
         });
         ```

      4. Validation Steps:
        - Check test location
        - Review existing tests
        - Create missing tests
        - Follow test requirements

      5. Error Prevention:
        - No implementation without tests
        - No skipping edge cases
        - No failing tests
        - No manual testing only
examples:
    input: | 
     // Bad: Implementation without tests 
     class MyService { async execute(): Promise<void> { // Code without tests } }

     // Good: Test first 
     describe('MyService', () => { describe('execute', () => { it('performs the expected action'); }); }); 

metadata: 
    priority: high 
    version: 1.0.0 
    changelog:
        - version: 1.0.0 
          changes:
            - Initial version
            - Added core TDD principles
            - Added test structure examples
            - Added validation steps 
</rule>

## Implementation Guide

1. **Finding Existing Tests**

```bash
   find test/ -name "*.test.ts" | grep $FEATURE_NAME
```

2. **Creating New Tests**

```typescript
   // test/services/MyService.test.ts
   import { describe, it, expect, beforeEach } from '@jest/globals';
   import { MyService } from '../../src/services/MyService';

   describe('MyService', () => {
     let service: MyService;

     beforeEach(() => {
       service = new MyService();
     });

     describe('execute', () => {
       it('succeeds with valid input', async () => {
         const result = await service.execute();
         expect(result.success).toBeTruthy();
       });

       it('fails gracefully with invalid input', async () => {
         const result = await service.execute();
         expect(result.success).toBeFalsy();
       });
     });
   });
```
3. **Running Tests**

```bash
   npm test test/services/MyService.test.ts
```

4. **Implementation**

```typescript
   // src/services/MyService.ts
   interface ServiceResult {
     success: boolean;
     data?: unknown;
     error?: string;
   }

   export class MyService {
     async execute(): Promise<ServiceResult> {
       // Implementation following test requirements
       return { success: true };
     }
   }
```

## Best Practices

1. **Spec Organization**
    - One test file per class/module
    - Logical grouping of contexts
    - Clear, descriptive test names

2. **Test Coverage**
    - Happy path scenarios
    - Edge cases
    - Error conditions
    - Boundary values

3. **Maintainability**
    - DRY tests using shared examples
    - Clear setup using beforeEach
    - Isolated tests
    - Meaningful assertions

4. **Documentation**
    - Tests serve as documentation
    - Clear descriptions
    - Example usage
    - Edge case documentation

## Overview

This rule establishes Test-Driven Development (TDD) as the standard approach for implementing services and complex code in the Social project.

## Core Principles

1. **Test First, Code Second**
    - ALWAYS check for existing tests before modifying or creating code
    - If no test exists, create one BEFORE implementing the feature
    - Use tests to define the expected behavior and interface

2. **Spec Structure**

```typescript
   describe('ServiceName', () => {
     // Shared examples for common behavior
     describe('expected behavior', () => {
       it('defines core functionality');
       it('handles edge cases');
       it('validates inputs');
     });

     // Context-specific test cases
     describe('with specific conditions', () => {
       it('behaves as expected');
     });
   });
```
3. **Implementation Process** 
    a. Review existing tests (if any) 
    b. Write new tests defining expected behavior 
    c. Run tests (they should fail) 
    d. Implement code to make tests pass 
    e. Refactor while keeping tests green

## Example from TranscriptFetcher

Good:

```typescript
// First: Review transcript_parser_spec.ts
import { TranscriptParser } from '../../src/services/TranscriptParser';

describe('TranscriptParser', () => {
  const fixturesPath = 'path/to/fixtures';

  describe('a transcript parser', (format: string) => {
    it('returns a Transcript object');
    it('includes properly structured segments');
    it('provides access to unique speakers');
  });

  describe('with specific format', () => {
    it('handles format correctly');
  });
});

// Then: Implement service based on test
class TranscriptFetcherService {
  async call() {
    // Implementation follows test requirements
  }
}
```

Bad:

```typescript
// Writing implementation first without tests
class TranscriptFetcherService {
  async call() {
    // Implementation without clear requirements
    // No validation of behavior
    // No test coverage
  }
}
```

## Validation Steps

Before implementing any service or complex code:

1. **Spec Location Check**

```bash
   find test/ -name "*_spec.ts" | grep $FEATURE_NAME
```
2. **Spec Review**
    - Read all related tests
    - Understand shared examples
    - Note edge cases
    - Review fixtures

3. **Spec Creation (if needed)**
    - Create test file
    - Define shared examples
    - Write context-specific tests
    - Include edge cases
    - Add appropriate fixtures

4. **Implementation**
    - Follow test requirements
    - Run tests frequently
    - Refactor when needed
    - Maintain test coverage

## Common Patterns

1. **Service Tests**

```typescript
   describe('ServiceName', () => {
     describe('execute', () => {
       describe('with valid input', () => {
         it('performs expected action');
       });

       describe('with invalid input', () => {
         it('handles errors appropriately');
       });
     });
   });
```

2. **Model Tests**

```typescript
   describe('ModelName', () => {
     describe('validations', () => {
       it('should validate presence of field');
     });

     describe('associations', () => {
       it('should belong to other model');
     });
   });
```

3. **Error Prevention**

    1. Never start implementation without tests
    2. Don't modify existing code without reviewing tests
    3. Don't skip writing tests for edge cases
    4. Don't leave failing tests unresolved

### Examples

### Good Process

1. Check for tests
2. Review existing tests
3. Write new tests
4. Implement feature
5. Refactor

### Bad Process

1. Start coding immediately
2. Test manually
3. Fix bugs as they appear
4. Write tests later (or never)

## References

    - Full documentation in `docs/reference-docs/tdd.md`
    - Jest documentation
    - Supertest documentation
    - Mocking libraries documentation

## Enforcement

The AI assistant should:

1. ALWAYS check for existing tests first
2. Suggest creating tests if none exist
3. Follow TDD principles
4. Reference relevant tests in responses
5. Maintain test coverage
6. Prevent implementation without tests

## Examples

### Finding Tests

```bash
# Good
find test/ -name "*transcript*_spec.ts"

# Bad
Start implementing without checking
```

## Real-World Example: Transcript Parser Recovery

This example demonstrates how we recovered from an incorrect implementation approach by returning to TDD principles:


### Initial Mistake (What Not To Do)

```typescript
// BAD: Started with implementation without tests
class TranscriptParser {
  async parse(content: string) {
    // Started writing parser logic without clear requirements
    // No test coverage for different formats
    // No validation of expected output structure
    // Led to confusion about expected behavior
  }
}
```

### TDD Recovery Process

1. **Step 1: Stop and Write Tests First**

```typescript
// GOOD: Created comprehensive tests first
import { TranscriptParser } from '../../src/services/TranscriptParser';
import { Transcript, Segment } from '../../src/models/Transcript';
import * as fs from 'fs';
import * as path from 'path';

describe('TranscriptParser', () => {
  const fixturesPath = path.join(__dirname, '../fixtures');

  describe('a transcript parser', (format: string) => {
    let content: string;

    beforeEach(() => {
      content = fs.readFileSync(path.join(fixturesPath, `sample.${format}`), 'utf-8');
    });

    it('returns a structured transcript', async () => {
      const parser = new TranscriptParser();
      const result = await parser.parse(content);
      expect(result).toBeInstanceOf(Transcript);
      expect(result.segments).toBeInstanceOf(Segment);
    });

    it('identifies speakers correctly', async () => {
      const parser = new TranscriptParser();
      const result = await parser.parse(content);
      expect(result.speakers).toContain('Speaker 1');
      expect(result.speakers).toContain('Speaker 2');
    });

    it('preserves timestamp information', async () => {
      const parser = new TranscriptParser();
      const result = await parser.parse(content);
      expect(result.segments[0].startTime).toBeDefined();
      expect(result.segments[0].endTime).toBeDefined();
    });
  });

  describe('with VTT format', () => {
    it('behaves like a transcript parser', () => 'vtt');
  });

  describe('with SRT format', () => {
    it('behaves like a transcript parser', () => 'srt');
  });
});
```

2. **Step 2: Implement Against Tests**

```typescript
class TranscriptParser {
  async parse(content: string) {
    const format = this.detectFormat(content);
    const segments = await this.parseSegments(content, format);

    return new Transcript(
      segments,
      this.extractSpeakers(segments)
    );
  }

  private detectFormat(content: string): string {
    // Implementation guided by format-specific tests
    return 'vtt'; // Placeholder
  }

  private async parseSegments(content: string, format: string): Promise<Segment[]> {
    // Implementation driven by segment structure tests
    return []; // Placeholder
  }

  private extractSpeakers(segments: Segment[]): string[] {
    // Implementation guided by speaker identification tests
    return []; // Placeholder
  }
}
```

### Key Learnings

1. **Problem:** Starting with implementation led to:
    - Unclear requirements
    - Missing edge cases
    - No validation of output structure
    - Difficulty testing different formats

2. **Solution**: Returning to TDD principles:
    - Wrote comprehensive tests first
    - Defined clear expectations
    - Covered multiple formats
    - Validated output structure
    - Used shared examples for common behavior

3. **Benefits Realized**:
        Clear interface definition
        Confidence in format handling
        Easy to add new formats
        Maintainable test suite
        Documented behavior

This real-world example demonstrates how returning to TDD principles helped recover from an implementation-first approach and led to a more robust, well-tested solution.