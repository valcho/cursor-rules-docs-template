---
description: Standards for using assertions in TypeScript
globs: *.ts, *.tsx
---
---
description: 
globs: *.ts, *.tsx
---
# Assertion Rules

<rule>
name: assertions
description: Standards for using assertions in TypeScript
filters:
  # Match TypeScript and React files
  - type: file_extension
    pattern: "\\.(ts|tsx)$"
  # Match potential assertion scenarios
  - type: content
    pattern: "(\\?\\.|\\|\\||\\?\\?|\\bdefault\\b)"

actions:
  - type: reject
    conditions:
      - pattern: "\\w+\\s*=\\s*\\w+\\s*\\|\\|\\s*''"
        message: "Avoid using default values when you expect the value to be present. Use assertions instead."
      - pattern: "\\w+\\?\\."
        message: "If you're certain a value should exist, use assertions instead of optional chaining."

  - type: suggest
    message: |
      When dealing with values that should be present:

      1. Use `shouldBePresent()` when you expect a value to exist:
         ```typescript
         // Instead of:
         const name = user?.name || 'Unknown'

         // Do this:
         const name = shouldBePresent(user.name, 'user.name')
         ```

      2. Use `assertField()` when checking object properties:
         ```typescript
         // Instead of:
         const balance = account?.balance ?? 0

         // Do this:
         const balance = assertField(account, 'balance')
         ```

      3. Throw early and explicitly:
         - Better to fail fast with a clear error
         - Avoid propagating invalid states
         - Makes debugging easier
         - Prevents subtle runtime errors

      4. Use assertions when:
         - Loading required configuration
         - Accessing API responses you know should have data
         - Getting values after existence checks
         - Accessing required object properties

      5. Don't use assertions when:
         - Handling truly optional values
         - Dealing with user input
         - Working with external data you don't control

examples:
  - input: |
      // Bad: Using default values for required data
      const config = {
        apiKey: process.env.API_KEY || '',
        baseUrl: process.env.BASE_URL ?? 'http://localhost'
      }

      // Good: Asserting required configuration
      const config = {
        apiKey: shouldBePresent(process.env.API_KEY, 'API_KEY'),
        baseUrl: shouldBePresent(process.env.BASE_URL, 'BASE_URL')
      }

      // Bad: Optional chaining when value should exist
      const getUserName = (user: User) => {
        return user?.profile?.name || 'Anonymous'
      }

      // Good: Asserting required values
      const getUserName = (user: User) => {
        const profile = shouldBePresent(user.profile, 'user.profile')
        return shouldBePresent(profile.name, 'user.profile.name')
      }

      // Bad: Using default for required field
      const getBalance = (account: Account) => {
        return account.balance ?? 0
      }

      // Good: Asserting required field
      const getBalance = (account: Account) => {
        return assertField(account, 'balance')
      }
    output: "Assertions used correctly"

metadata:
  priority: high
  version: 1.0
</rule>